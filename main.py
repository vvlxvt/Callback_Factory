import copy
from aiogram import Bot, Dispatcher
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart
from aiogram.filters.callback_data import CallbackData
from aiogram.types import (CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message)
import logging
from config_data.config import Config, load_config


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(filename)s:%(lineno)d #%(levelname)-8s '
           '[%(asctime)s] - %(name)s - %(message)s')

# –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—á–∞–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
logger.info('Starting bot')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é config
config: Config = load_config()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot: Bot = Bot(token=config.tg_bot.token,
               parse_mode='HTML')
dp: Dispatcher = Dispatcher()

# –°–æ–∑–¥–∞–µ–º —Å–≤–æ–π –∫–ª–∞—Å—Å —Ñ–∞–±—Ä–∏–∫–∏ –∫–æ–ª–ª–±—ç–∫–æ–≤, —É–∫–∞–∑—ã–≤–∞—è –ø—Ä–µ—Ñ–∏–∫—Å
# –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É callback_data

FIELD_SIZE = 8

# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
LEXICON = {'/start': '–í–æ—Ç —Ç–≤–æ–µ –ø–æ–ª–µ. –ú–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å —Ö–æ–¥',
           0: ' ',
           1: 'üåä',
           2: 'üí•',
           'miss': '–ú–∏–º–æ!',
           'hit': '–ü–æ–ø–∞–ª!',
           'used': '–í—ã —É–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏ —Å—é–¥–∞!',
           'next_move': '–î–µ–ª–∞–π—Ç–µ –≤–∞—à —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥'}

# –•–∞—Ä–¥–∫–æ–¥–∏–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª–µ–π –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ
ships: list[list[int]] = [[1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 0, 0],
    [0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 1, 1, 0, 0, 0, 0]]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º "–±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users: dict[int, dict[str, list]] = {}

# –°–æ–∑–¥–∞–µ–º —Å–≤–æ–π –∫–ª–∞—Å—Å —Ñ–∞–±—Ä–∏–∫–∏ –∫–æ–ª–ª–±—ç–∫–æ–≤, —É–∫–∞–∑—ã–≤–∞—è –ø—Ä–µ—Ñ–∏–∫—Å
# –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É callback_data
class FieldCallbackFactory(CallbackData, prefix="user_field"):
    x: int
    y: int

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
def reset_field(user_id: int) -> None:
    users[user_id]['ships'] = copy.deepcopy(ships)
    users[user_id]['field'] = [[0 for _ in range(FIELD_SIZE)] for _ in range(FIELD_SIZE)]

# –§—É–Ω–∫—Ü–∏—è, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑
# –º–∞—Ç—Ä–∏—Ü—ã —Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_field_keyboard(user_id: int) -> InlineKeyboardMarkup:
    array_buttons: list[list[InlineKeyboardButton]] = []

    for i in range(FIELD_SIZE):
        array_buttons.append([])
        for j in range(FIELD_SIZE):
            array_buttons[i].append(InlineKeyboardButton(text=LEXICON[users[user_id]['field'][i][j]],
                callback_data=FieldCallbackFactory(x=i, y=j).pack()))

    markup = InlineKeyboardMarkup(inline_keyboard=array_buttons)
    return markup

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start, –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ "–±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", –æ–±–Ω—É–ª—è—Ç—å –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
@dp.message(CommandStart())
async def process_start_command(message: Message):
    if message.from_user.id not in users:
        users[message.from_user.id] = {}
    reset_field(message.from_user.id)
    await message.answer(text=LEXICON['/start'], reply_markup=get_field_keyboard(message.from_user.id))

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –ª—é–±–æ–π –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –Ω–∞ –ø–æ–ª–µ,
# –∑–∞–ø—É—Å–∫–∞—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞–∂–∞—Ç–∏—è –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
@dp.callback_query(FieldCallbackFactory.filter())
async def process_category_press(callback: CallbackQuery, callback_data: FieldCallbackFactory):
    field = users[callback.from_user.id]['field']
    ships = users[callback.from_user.id]['ships']
    if field[callback_data.x][callback_data.y] == 0 and ships[callback_data.x][callback_data.y] == 0:
        answer = LEXICON['miss']
        field[callback_data.x][callback_data.y] = 1
    elif field[callback_data.x][callback_data.y] == 0 and ships[callback_data.x][callback_data.y] == 1:
         answer = LEXICON['hit']
        field[callback_data.x][callback_data.y] = 2
    else:
        answer = LEXICON['used']

    try:
        await callback.message.edit_text(text=LEXICON['next_move'],
            reply_markup=get_field_keyboard(callback.from_user.id))
    except TelegramBadRequest:
        pass

    await callback.answer(answer)

if __name__ == '__main__':
    dp.run_polling(bot)